@model TestOrderApplication.Models.BigViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Order</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Order.Number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Order.Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Order.Number, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Order.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Order.Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Order.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Order.ProviderId, "ProviderId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Order.ProviderId,
                            (SelectList)ViewBag.ProviderId,
                            "Select Provider",
                          new { id = "ddlCycleType", @class = "required" })
                @*@Html.DropDownList("ProviderId", null, htmlAttributes: new { @class = "form-control", required = "true" })*@
                @Html.ValidationMessageFor(model => model.Order.ProviderId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    @*<div class="form-horizontal">
                <h4>OrderItem</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.OrderItem.OrderId, "OrderId", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("OrderId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OrderItem.OrderId, "", new { @class = "text-danger" })
                    </div>
                </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrderItem.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrderItem.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderItem.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrderItem.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrderItem.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderItem.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrderItem.Unit, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrderItem.Unit, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderItem.Unit, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@

@*    <style>
        td {
            padding: 5px;
        }
    </style>*@
    <div style="width:700px; padding:5px; background-color:white;">

        @*@Html.AntiForgeryToken()*@
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div><a href="#" id="addNew">Add New</a></div>
        <table id="dataTable" border="0" cellpadding="0" cellspacing="0">
            <tr>
                <th>@Html.DisplayNameFor(model => model.OrderItem.Name)</th>
                <th>@Html.DisplayNameFor(model => model.OrderItem.Quantity)</th>
                <th>@Html.DisplayNameFor(model => model.OrderItem.Unit)</th>
                <th></th>
            </tr>
            @if (Model.orderItemsList != null && Model.orderItemsList.Count > 0)
            {
                int j = 0;
                foreach (var i in Model.orderItemsList)
                {
                    <tr style="border:1px solid black">
                        <td>@Html.TextBoxFor(a=>a.orderItemsList[j].Name)</td>
                        <td>@Html.TextBoxFor(a =>a.orderItemsList[j].Quantity)</td>
                        <td>@Html.TextBoxFor(a=>a.orderItemsList[j].Unit)</td>
                        <td></td>
                        <td>
                            @if (j > 0)
                            {
                                <a href="#" id="remove" class="remove">Remove</a>
                            }
                        </td>
                    </tr>
                    j++;
                }
            }
        </table>
        @*<input type="submit" value="Save Bulk Data" />*@
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script language="javascript">
        $(document).ready(function () {
            //1. Add new row
            $("#addNew").click(function (e) {
                e.preventDefault();
                var $tableBody = $("#dataTable");
                var $trLast = $tableBody.find("tr:last");
                var $trNew = $trLast.clone();

                var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
                $trNew.find("td:last").html('<a href="#" class="remove">Remove</a>');
                $.each($trNew.find(':input'), function (i, val) {
                    // Replaced Name
                    var oldN = $(this).attr('name');
                    var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                    $(this).attr('name', newN);
                    //Replaced value
                    var type = $(this).attr('type');
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                    // If you have another Type then replace with default value
                    $(this).removeClass("input-validation-error");

                });
                $trLast.after($trNew);

                // Re-assign Validation
                var form = $("form")
                    .removeData("validator")
                    .removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);
            });

            // 2. Remove
            $("#dataTable").on("click", ".remove", function (e) {
                e.preventDefault();
                $(this).parent().parent().remove();
            });

        });
    </script>
}
